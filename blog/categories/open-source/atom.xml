<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Open Source | Miker]]></title>
  <link href="http://rowehl.com/blog/categories/open-source/atom.xml" rel="self"/>
  <link href="http://rowehl.com/"/>
  <updated>2013-10-28T11:16:21-07:00</updated>
  <id>http://rowehl.com/</id>
  <author>
    <name><![CDATA[Mike Rowehl]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Firefox OS with App Manager]]></title>
    <link href="http://rowehl.com/blog/2013/10/28/firefox-os-with-app-manager/"/>
    <updated>2013-10-28T10:46:00-07:00</updated>
    <id>http://rowehl.com/blog/2013/10/28/firefox-os-with-app-manager</id>
    <content type="html"><![CDATA[<p>One of the nice things about
<a href="http://rowehl.com/blog/2013/10/24/firefoxos-1-dot-2-on-zte-open/">getting FFOS 1.2 on my device</a>
is being able to use App Manager instead of the simulator plugin to do
development. Given that
<a href="https://hacks.mozilla.org/2013/10/introducing-the-firefox-os-app-manager/">the App Manager replaces the Simulator Dashboard</a>
in the newest versions of Firefox, it seems like the kind of thing developers
should have access to. So hopefully ZTE figures out a way to get a 1.2+
release on their developer phones.</p>

<p>Note however that the app manager is available in the Firefox 26 series, which
is <a href="http://www.mozilla.org/en-US/firefox/aurora/">current the pre-alpha release</a>.
You can install Aurora side by side with the current stable Firefox release
(that's the default on OS X at least). The app manager is available without
having to install anything, but you'll need to install the ADB helper to
connect to an actual device. Details are in the
<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Firefox_OS/Using_the_App_Manager">using the app manager</a>
document. I've been testing it out primarily with my locally built FFOS 1.2 on
the ZTE Open (inari) device.</p>

<p>Now comes the hard part of trying to figure out what you can put on the
device to make sure everything is working before you dive too far into
hacking around on your own. You'll probably run across things like
<a href="https://github.com/mozilla/firefoxos-quick-start">the Firefox OS Quick Start example</a>
and the <a href="https://github.com/mozilla/mortar">Mozilla templates for Open Web Apps</a>.
None of those seem to be working to generate something you can install on
a device (they work great for the simulator, running on the same machine as
your development tools). Seems like there haven't been a ton of folks working
with physical devices yet.</p>

<p>This
<a href="https://github.com/robnyman/Firefox-OS-Boilerplate-App">Firefox OS boilerplate app</a>
serves as a fantastic starting point however. Just a clone and then
"Add Packaged App" in the app manager and you'll be able to refresh and run
on the device. There's some rough bits, like geolocation isn't working within
the app on my device, and "Take picture" has some issues. However I can
"Pick image" and choose camera as the source and that works okay. And the
rest of the stuff like vibrate, ambient light, device orientation, and check
battery are all working.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FirefoxOS 1.2 on ZTE Open]]></title>
    <link href="http://rowehl.com/blog/2013/10/24/firefoxos-1-dot-2-on-zte-open/"/>
    <updated>2013-10-24T18:06:00-07:00</updated>
    <id>http://rowehl.com/blog/2013/10/24/firefoxos-1-dot-2-on-zte-open</id>
    <content type="html"><![CDATA[<p>I picked up a <a href="http://www.engadget.com/2013/10/03/zte-open-review/">ZTE Open</a>
Firefox OS device a little while ago. Given that
<a href="https://marketplace.firefox.com/developers/dev_phone">developer hub</a> says
it's a "powerful device aimed at developers and early adopters worldwide" I
figured it would be good for some hackery. I read the specs, so I knew that
"powerful" should be pretty suspect. I was surprised to find out that it's not
really for developers, and increasingly doesn't seem to be all that open.</p>

<p>When I first grabbed it I figured maybe I could use it to just get a feel for
FirefoxOS and the direction the teams were trying to push for. However, the
phone ships with a 1.0.0 version of the operating system and some major basic
features were missing to even use it for a day or two. For instance GMail
contact syncing shows up in FFOS 1.1 (I'm not a Facebook user, so syncing using
the one existing mechanism wasn't an option). Since this was supposed to be
a developer phone for early adopters, I figured that would be easy to remedy.
Not so, there's no official OS updates for the phone planned at all. Weird.</p>

<p>Okay, no problem, I'll use it to just do a little poking around developing
using the Gecko/Gaia stack and getting a feel for it on real hardware. However,
trying to push an app from the simulator it never showed up on the phone.
Rebooted and it popped up. Turns out there's a
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=842725">race condition bug in FFOS 1.0</a>
which really keeps it from being usable as a developer platform.
Of course the pages talking about it say you should "make sure you have the
latest version of Firefox OS on your devices". Which we just established
isn't possible for this developer device, at least not according to ZTE.
Well ain't that just a kick in the crotch?</p>

<p>So of course I ended up doing what I said I wasn't going to do, and dove
straight down the rabbithole of compiling my own recent version of Firefox OS
from source and getting it installed on my ZTE Open device. Turned out to be
way more of an involved process than I expected given that the device is named
the "ZTE Open". I expected that to mean developer friendly. Together with the
Firefox site saying the device was aimed at developers, I didn't see any
reason to second guess that assumption. Here's the process I went through
though, which should get you going from an unboxing to running FFOS 1.2 on
your device. The process isn't too horrible, but making sense of lots of the
existing posts out there and figuring out the right order for a fresh device
took some experimentation.</p>

<p>The first thing to do is apply the
<a href="http://www.ztedevices.com/support/smart_phone/b5a2981a-1714-4ac7-89e1-630e93e220f8.html?type=software">update from ZTE</a>.
This was one of the hardest parts to puzzle out for me. Turns out the firmware
on the model I had was old enough that it was failing to flash the images once
I had them built. There were folks posting that they had gotten certain parts
working, and it was failing for me and others who had recently purchased
devices. Turned out that the original firmware didn't support fastboot, which
is one of the mechanisms for getting the code actually onto the device. That
V1.0.0B02 release from ZTE has instructions for how to load it using the stock
recovery image, and once it's installed you'll be able to use the simple tools
to get your code onto the device. Also nice, with the ZTE provided update.zip
on your SD card you can use recovery mode to get back to a working system if
you end up screwing up the system partition. Which I did dozens of times.</p>

<p>Once you have the ZTE update in make sure you have debugging turned on for
your phone. Go into Settings / Device Information / More Information /
Developer and flip on the Remote Debugging option if it isn't on already.</p>

<p>Next, unfortunately, you'll have to grab a binary image of the
<a href="http://sl.edujose.org/2013/10/adapted-boot-image-for-use-with-b2g.html">boot partition</a>
hacked up and ready to use. This is horrible, and it's the other part that was
really a sticking point trying to figure out. As you'll see later on, for some
reason the boot2gecko build for the inari device (which is the name you use
for building for the ZTE Open) doesn't generate a boot.img. From what I can
tell it doesn't even generate the parts necessary to pull together into a
boot.img. And as I found out through multiple tries, putting the system and
user partitions from a custom build together with the boot from a stock system
you'll generally end up with the OS booting and the UI layers crashing
repeatedly. That's what I got at least.</p>

<p>Once you've got that stuff the build is pretty much as described in the
<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Firefox_OS/Firefox_OS_build_prerequisites">FirefoxOS build docs</a>.
I use an OS X system, but I did my build in a VMWare VM running Ubuntu 13.04.
The tools used to interact with the Firefox OS devices are the same as used
for Android development. And I've done that under a VM tons, so I was pretty
comfortable with that part of the setup. Plus being in a VM meant I could muck
with the stuff in the Linux install as much as I wanted. Below is the actual process I
ran through, getting all the tools in place, configuring, and building. This
assumes you're starting from a completely fresh 13.04 install, you run through
the installer and then let it pull down any updates, then do this:</p>

<ul>
<li>sudo apt-get install --no-install-recommends autoconf2.13 bison bzip2 ccache
curl flex gawk gcc g++ g++-multilib gcc-4.6 g++-4.6 g++-4.6-multilib git
ia32-libs lib32ncurses5-dev lib32z1-dev zlib1g:amd64 zlib1g-dev:amd64
zlib1g:i386 zlib1g-dev:i386 libgl1-mesa-dev libx11-dev make zip</li>
<li>sudo add-apt-repository ppa:webupd8team/java</li>
<li>sudo apt-get update</li>
<li>sudo apt-get install oracle-java6-installer</li>
<li>sudo apt-get install oracle-java6-set-default</li>
<li>sudo apt-get install android-tools-adb</li>
<li>sudo echo 'SUBSYSTEM=="usb", ATTR{idVendor}=="19d2", MODE="0666", GROUP="plugdev"' > /etc/udev/rules.d/android.rules</li>
<li>sudo echo 'SUBSYSTEM=="usb", ATTR{idVendor}=="18d1", MODE="0666", GROUP="plugdev"' >> /etc/udev/rules.d/android.rules</li>
<li>sudo chmod a+r /etc/udev/rules.d/android.rules</li>
<li>sudo service udev restart</li>
<li>export CC=gcc-4.6</li>
<li>export CXX=g++-4.6</li>
<li>ccache --max-size 3GB</li>
<li>git config --global user.email xxxx</li>
<li>git config --global user.name "yyyy"</li>
<li>git clone git://github.com/mozilla-b2g/B2G.git</li>
<li>cd B2G</li>
<li>BRANCH=v1.2 VARIANT=user ./config.sh inari</li>
<li>BRANCH=v1.2 VARIANT=user ./build.sh</li>
<li>cp [location of that binary boot.img] out/target/product/inari/boot.img</li>
<li>./flash.sh</li>
</ul>


<p>And then you should have a FFOS 1.2 install runnable on your device. I tested
mine out with my TMobile SIM in the US: phone works, SMS works, data connection
works (though by default it was disabled on mine, just use the notification
pulldown and toggle the cellular data option right next to the wifi toggle).
Hopefully as the device and OS evolve this gets a lot easier and more developer
friendly. Needing to pull a binary boot image from someone else just to get a
fresh build onto a device, that's not good. I was expecting FFOS development
to show up Android development in terms of encouraging developers to work with
the base system. Not the case so far.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[http_load for Request Replay]]></title>
    <link href="http://rowehl.com/blog/2006/08/23/http_load-for-request-replay/"/>
    <updated>2006-08-23T16:05:49-07:00</updated>
    <id>http://rowehl.com/blog/2006/08/23/http_load-for-request-replay</id>
    <content type="html"><![CDATA[<p>The <a href="http://talks.php.net/show/oscon06/0">presentation that Rasmus gave at OSCON</a> this year seems to have kicked some ass. I missed the conf, but got a bunch of interesting info from the slides. In particular I hadn't used <a href="http://www.acme.com/software/http_load/">http_load</a> before. Part of what I've been doing at AdMob is taking a look at performance and scaling, so that was a great find. It's exactly the set of controls and measurements I normally start out with, and it really does run very efficiently in terms of not loading down the system that http_load is running on.</p>

<p>Just about the only thing that didn't work the way I wanted was the random selection from the url list file. I wanted to replay a set of traffic in order, so I <a href="http://www.rowehl.com/blog/wp-content/uploads/2006/08/http_load-miker-01patch.txt">hacked up an -orderedurls option</a> to select from the url list sequentially (repeating the list once you get to the end) instead of randomly choosing. Reading the whole file in and parsing it probably isn't the way to go for this particular usage, so I'll have to clean it up when the traffic segments I'm playing get into the millions instead of just the tens of thousands. But it works great for now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Lappy]]></title>
    <link href="http://rowehl.com/blog/2006/08/17/linux-lappy/"/>
    <updated>2006-08-17T23:23:23-07:00</updated>
    <id>http://rowehl.com/blog/2006/08/17/linux-lappy</id>
    <content type="html"><![CDATA[<p>It's just about New Laptop Time. Not quite, but almost. Being a Linux only user it's always an adventure trying to figure out what hardware to get. Hardware support has definitely gotten better under Linux, but figuring out what actually lives inside the system you're thinking about picking up at deep discount from Office Max certainly has not. And I'm not a dual-booter either. I don't have Windows to fall back on should something not work on my laptop. I take a scorched earth approach to Windows on my hardware, and generally wipe and repave the whole thing. Especially if it's my personal laptop, which is what I plan for this to be.</p>

<p>Currently I'm leaning very heavily toward <a href="http://www.thinkwiki.org/wiki/Category:X41_Tablet">the Thinkpad X41 tablet</a>. It looks like there's good X support for a bunch of stuff that's traditionally a pain in the ass under Linux. Screen rotation seems to be working (without restarting X, thank god), the input driver for the touchscreen, power management (including frequency scaling), and wireless using ipw2200. Anyone out there with an X41 tried Linux and care to toss in some comments before I pick one of the things up? It's hard to tell from wiki postings just how painful is it to get the thing actually setup, and there's always the chance that the instructions on the wiki are wrong or incomplete.</p>

<p>On a very much related note, anyone know a good shop in the San Francisco Bay Area that could come up with some Pimp My Ride style dashboard mounting and wiring hookups for my car?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kernel Config from Thinkpad X32]]></title>
    <link href="http://rowehl.com/blog/2006/03/13/kernel-config-from-thinkpad-x32/"/>
    <updated>2006-03-13T05:56:09-08:00</updated>
    <id>http://rowehl.com/blog/2006/03/13/kernel-config-from-thinkpad-x32</id>
    <content type="html"><![CDATA[<p>Someone emailed me asking for the config for the kernel I'm running on my X32, so I figured I might as well post it instead of just mailing it back.  I'm using the 2.6.13 drop from <a href="http://www.kernel.org">kernel.org</a> and adding in <a href="http://www.rowehl.com/blog/?p=550">packages like WPA afterward</a>.  Here's <a href="http://www.rowehl.com/blog/wp-content/uploads/2006/03/config-2.6.13.txt">the config</a>.</p>
]]></content>
  </entry>
  
</feed>
